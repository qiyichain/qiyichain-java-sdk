package com.qiyichain.utils;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class NFTSol extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b50604051620035c4380380620035c4833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620001bc57600080fd5b908301906020820185811115620001d257600080fd5b8251640100000000811182820188101715620001ed57600080fd5b82525081516020918201929091019080838360005b838110156200021c57818101518382015260200162000202565b50505050905090810190601f1680156200024a5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200026e57600080fd5b9083019060208201858111156200028457600080fd5b82516401000000008111828201881017156200029f57600080fd5b82525081516020918201929091019080838360005b83811015620002ce578181015183820152602001620002b4565b50505050905090810190601f168015620002fc5780820380516001836020036101000a031916815260200191505b5060405250859150849050620003196301ffc9a760e01b62000420565b81516200032e906006906020850190620004a9565b50805162000344906007906020840190620004a9565b50620003576380ac58cd60e01b62000420565b62000369635b5e139f60e01b62000420565b6200037b63780e9d6360e01b62000420565b50600090506200038a620004a5565b600c80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600d80546001600160a01b031916331790558151620003ff906010906020850190620004a9565b50805162000415906011906020840190620004a9565b505050505062000545565b6001600160e01b0319808216141562000480576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004ec57805160ff19168380011785556200051c565b828001600101855582156200051c579182015b828111156200051c578251825591602001919060010190620004ff565b506200052a9291506200052e565b5090565b5b808211156200052a57600081556001016200052f565b61306f80620005556000396000f3fe6080604052600436106101ee5760003560e01c80636352211e1161010d578063977c25b0116100a0578063bc8ba28f1161006f578063bc8ba28f14610aba578063c87b56dd14610ae4578063d96a094a14610b0e578063e985e9c514610b2b578063f2fde38b14610b66576101ee565b8063977c25b01461095257806398214bcb1461097c578063a22cb465146109ae578063b88d4fde146109e9576101ee565b806382367b2d116100dc57806382367b2d146108e357806386a2e0d0146109135780638da5cb5b1461092857806395d89b411461093d576101ee565b80636352211e1461085c5780636c0360eb1461088657806370a082311461089b578063715018a6146108ce576101ee565b806323b872dd1161018557806342842e0e1161015457806342842e0e146107b05780634f0d7fd8146107f35780634f6ccce71461080857806356f3ca6514610832576101ee565b806323b872dd146106f557806326a49e37146107385780632bb3b114146107625780632f745c5914610777576101ee565b80630bb78ec1116101c15780630bb78ec1146103465780630eb48c341461037057806313a20719146104fe57806318160ddd146106e0576101ee565b806301ffc9a7146101f357806306fdde031461023b578063081812fc146102c5578063095ea7b31461030b575b600080fd5b3480156101ff57600080fd5b506102276004803603602081101561021657600080fd5b50356001600160e01b031916610b99565b604080519115158252519081900360200190f35b34801561024757600080fd5b50610250610bbc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028a578181015183820152602001610272565b50505050905090810190601f1680156102b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d157600080fd5b506102ef600480360360208110156102e857600080fd5b5035610c52565b604080516001600160a01b039092168252519081900360200190f35b34801561031757600080fd5b506103446004803603604081101561032e57600080fd5b506001600160a01b038135169060200135610cb4565b005b34801561035257600080fd5b506102506004803603602081101561036957600080fd5b5035610d8f565b34801561037c57600080fd5b5061039a6004803603602081101561039357600080fd5b5035610e2a565b60405180878152602001866001600160a01b031681526020018515158152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156103fc5781810151838201526020016103e4565b50505050905090810190601f1680156104295780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561045c578181015183820152602001610444565b50505050905090810190601f1680156104895780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156104bc5781810151838201526020016104a4565b50505050905090810190601f1680156104e95780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561050a57600080fd5b506106ce600480360360a081101561052157600080fd5b810190602081018135600160201b81111561053b57600080fd5b82018360208201111561054d57600080fd5b803590602001918460018302840111600160201b8311171561056e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b0385351695602086013595919450925060608101915060400135600160201b8111156105d557600080fd5b8201836020820111156105e757600080fd5b803590602001918460018302840111600160201b8311171561060857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561065a57600080fd5b82018360208201111561066c57600080fd5b803590602001918460018302840111600160201b8311171561068d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fb1945050505050565b60408051918252519081900360200190f35b3480156106ec57600080fd5b506106ce6110c9565b34801561070157600080fd5b506103446004803603606081101561071857600080fd5b506001600160a01b038135811691602081013590911690604001356110da565b34801561074457600080fd5b506106ce6004803603602081101561075b57600080fd5b5035611131565b34801561076e57600080fd5b506102ef611143565b34801561078357600080fd5b506106ce6004803603604081101561079a57600080fd5b506001600160a01b038135169060200135611152565b3480156107bc57600080fd5b50610344600480360360608110156107d357600080fd5b506001600160a01b0381358116916020810135909116906040013561117d565b3480156107ff57600080fd5b50610250611198565b34801561081457600080fd5b506106ce6004803603602081101561082b57600080fd5b50356111f3565b34801561083e57600080fd5b506102506004803603602081101561085557600080fd5b5035611209565b34801561086857600080fd5b506102ef6004803603602081101561087f57600080fd5b5035611271565b34801561089257600080fd5b50610250611299565b3480156108a757600080fd5b506106ce600480360360208110156108be57600080fd5b50356001600160a01b03166112fa565b3480156108da57600080fd5b50610344611362565b3480156108ef57600080fd5b506102276004803603604081101561090657600080fd5b5080359060200135611420565b34801561091f57600080fd5b506102506114fc565b34801561093457600080fd5b506102ef611557565b34801561094957600080fd5b50610250611566565b34801561095e57600080fd5b506102506004803603602081101561097557600080fd5b50356115c7565b34801561098857600080fd5b506102276004803603604081101561099f57600080fd5b5080359060200135151561162f565b3480156109ba57600080fd5b50610344600480360360408110156109d157600080fd5b506001600160a01b03813516906020013515156116fe565b3480156109f557600080fd5b5061034460048036036080811015610a0c57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610a4657600080fd5b820183602082011115610a5857600080fd5b803590602001918460018302840111600160201b83111715610a7957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611803945050505050565b348015610ac657600080fd5b5061022760048036036020811015610add57600080fd5b5035611861565b348015610af057600080fd5b5061025060048036036020811015610b0757600080fd5b5035611876565b61034460048036036020811015610b2457600080fd5b5035611af9565b348015610b3757600080fd5b5061022760048036036040811015610b4e57600080fd5b506001600160a01b0381358116916020013516611bf6565b348015610b7257600080fd5b5061034460048036036020811015610b8957600080fd5b50356001600160a01b0316611c24565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b5050505050905090565b6000610c5d82611d39565b610c985760405162461bcd60e51b815260040180806020018281038252602c815260200180612f38602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610cbf82611271565b9050806001600160a01b0316836001600160a01b03161415610d125760405162461bcd60e51b8152600401808060200182810382526021815260200180612fe86021913960400191505060405180910390fd5b806001600160a01b0316610d24611d46565b6001600160a01b03161480610d455750610d4581610d40611d46565b611bf6565b610d805760405162461bcd60e51b8152600401808060200182810382526038815260200180612e8b6038913960400191505060405180910390fd5b610d8a8383611d4a565b505050565b60086020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e225780601f10610df757610100808354040283529160200191610e22565b820191906000526020600020905b815481529060010190602001808311610e0557829003601f168201915b505050505081565b600080600060608060606000610e3f88611271565b6000898152600f6020908152604080832054600e835281842054600984529382902080548351601f6002600019600185161561010002019093169290920491820186900486028101860190945280845295965060ff90911694606093830182828015610eec5780601f10610ec157610100808354040283529160200191610eec565b820191906000526020600020905b815481529060010190602001808311610ecf57829003601f168201915b50505060008e8152600a60209081526040918290208054835160026001831615610100026000190190921691909104601f810184900484028201840190945283815295965060609594509250830182828015610f895780601f10610f5e57610100808354040283529160200191610f89565b820191906000526020600020905b815481529060010190602001808311610f6c57829003601f168201915b505050505090506060610f9b8d611876565b939d959c50939a50919850965094509092505050565b600080610fbc6110c9565b6001016000818152600e60209081526040808320899055600f9091529020805460ff191690559050610fee8682611db8565b610ff88188611dd6565b6110028185611e39565b61100c8184611e9c565b856001600160a01b03167ff2cb5e52049d127ad1c335f1cc25f2fdbc911bec1beb2611f4c1e8b1c274d4b486838a6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561108357818101518382015260200161106b565b50505050905090810190601f1680156110b05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a29695505050505050565b60006110d56002611eff565b905090565b6110eb6110e5611d46565b82611f0a565b6111265760405162461bcd60e51b81526004018080602001828103825260318152602001806130096031913960400191505060405180910390fd5b610d8a838383611fae565b600e6020526000908152604090205481565b600d546001600160a01b031681565b6001600160a01b038216600090815260016020526040812061117490836120fa565b90505b92915050565b610d8a83838360405180602001604052806000815250611803565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e225780601f10610df757610100808354040283529160200191610e22565b600080611201600284612106565b509392505050565b60096020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e225780601f10610df757610100808354040283529160200191610e22565b600061117782604051806060016040528060298152602001612eed6029913960029190612122565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b60006001600160a01b0382166113415760405162461bcd60e51b815260040180806020018281038252602a815260200180612ec3602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061117790611eff565b61136a611d46565b6001600160a01b031661137b611557565b6001600160a01b0316146113d6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600c80546001600160a01b0319169055565b6000828152600e602052604081205461143884611271565b6001600160a01b0316336001600160a01b03161461149d576040805162461bcd60e51b815260206004820152601c60248201527f4572726f722c20796f7520617265206e6f7420746865206f776e657200000000604482015290519081900360640190fd5b6000848152600e60209081526040918290208590558151838152908101859052808201869052905133917f8647dab5101cbe18afb171756e9753802f9d66725bf2346b079b8b1a275e0116919081900360600190a25060019392505050565b6011805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e225780601f10610df757610100808354040283529160200191610e22565b600c546001600160a01b031690565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b600a6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610e225780601f10610df757610100808354040283529160200191610e22565b600061163a83611271565b6001600160a01b0316336001600160a01b03161461169f576040805162461bcd60e51b815260206004820152601c60248201527f4572726f722c20796f7520617265206e6f7420746865206f776e657200000000604482015290519081900360640190fd5b6000838152600f6020908152604091829020805460ff1916851515908117909155825186815291820152815133927f3fd63d9ca8dc693a1b9911e664951294721009a4f6239c862d6719a160a1edfc928290030190a250600192915050565b611706611d46565b6001600160a01b0316826001600160a01b0316141561176c576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000611779611d46565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556117bd611d46565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b61181461180e611d46565b83611f0a565b61184f5760405162461bcd60e51b81526004018080602001828103825260318152602001806130096031913960400191505060405180910390fd5b61185b84848484612139565b50505050565b600f6020526000908152604090205460ff1681565b606061188182611d39565b6118bc5760405162461bcd60e51b815260040180806020018281038252602f815260200180612fb9602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156119515780601f1061192657610100808354040283529160200191611951565b820191906000526020600020905b81548152906001019060200180831161193457829003601f168201915b505050505090506060611962611299565b905080516000141561197657509050610bb7565b815115611a375780826040516020018083805190602001908083835b602083106119b15780518252601f199092019160209182019101611992565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106119f95780518252601f1990920191602091820191016119da565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610bb7565b80611a418561218b565b6040516020018083805190602001908083835b60208310611a735780518252601f199092019160209182019101611a54565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611abb5780518252601f199092019160209182019101611a9c565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b611b0281612266565b6000611b0d82611271565b905033611b19836123ed565b806001600160a01b0316826001600160a01b03167fef258f47a33a1cba99d81ea828f234ff5d6cb31034c0f79ecb5198f8c6d118f6600e60008781526020019081526020016000205486611b6c88611876565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611bb5578181015183820152602001611b9d565b50505050905090810190601f168015611be25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611c2c611d46565b6001600160a01b0316611c3d611557565b6001600160a01b031614611c98576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611cdd5760405162461bcd60e51b8152600401808060200182810382526026815260200180612e156026913960400191505060405180910390fd5b600c546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600061117760028361250d565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d7f82611271565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611dd2828260405180602001604052806000815250612519565b5050565b611ddf82611d39565b611e1a5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f64602c913960400191505060405180910390fd5b60008281526008602090815260409091208251610d8a92840190612d2d565b611e4282611d39565b611e7d5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f64602c913960400191505060405180910390fd5b60008281526009602090815260409091208251610d8a92840190612d2d565b611ea582611d39565b611ee05760405162461bcd60e51b815260040180806020018281038252602c815260200180612f64602c913960400191505060405180910390fd5b6000828152600a602090815260409091208251610d8a92840190612d2d565b60006111778261256b565b6000611f1582611d39565b611f505760405162461bcd60e51b815260040180806020018281038252602c815260200180612e5f602c913960400191505060405180910390fd5b6000611f5b83611271565b9050806001600160a01b0316846001600160a01b03161480611f965750836001600160a01b0316611f8b84610c52565b6001600160a01b0316145b80611fa65750611fa68185611bf6565b949350505050565b826001600160a01b0316611fc182611271565b6001600160a01b0316146120065760405162461bcd60e51b8152600401808060200182810382526029815260200180612f906029913960400191505060405180910390fd5b6001600160a01b03821661204b5760405162461bcd60e51b8152600401808060200182810382526024815260200180612e3b6024913960400191505060405180910390fd5b612056838383610d8a565b612061600082611d4a565b6001600160a01b0383166000908152600160205260409020612083908261256f565b506001600160a01b03821660009081526001602052604090206120a6908261257b565b506120b360028284612587565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000611174838361259d565b60008080806121158686612601565b9097909650945050505050565b600061212f84848461267c565b90505b9392505050565b612144848484611fae565b61215084848484612746565b61185b5760405162461bcd60e51b8152600401808060200182810382526032815260200180612de36032913960400191505060405180910390fd5b6060816121b057506040805180820190915260018152600360fc1b6020820152610bb7565b8160005b81156121c857600101600a820491506121b4565b60608167ffffffffffffffff811180156121e157600080fd5b506040519080825280601f01601f19166020018201604052801561220c576020820181803683370190505b50859350905060001982015b831561225d57600a840660300160f81b8282806001900393508151811061223b57fe5b60200101906001600160f81b031916908160001a905350600a84049350612218565b50949350505050565b6000818152600f602052604090205460ff1661228182611d39565b6122c9576040805162461bcd60e51b8152602060048201526014602482015273115c9c9bdc8b081ddc9bdb99c81d1bdad95b925960621b604482015290519081900360640190fd5b8061231b576040805162461bcd60e51b815260206004820152601960248201527f4974656d206e6f74206c69737465642063757272656e746c7900000000000000604482015290519081900360640190fd5b6000828152600e602052604090205434101561237e576040805162461bcd60e51b815260206004820152601a60248201527f4572726f722c2074686520616d6f756e74206973206c6f776572000000000000604482015290519081900360640190fd5b61238782611271565b6001600160a01b0316336001600160a01b03161415611dd2576040805162461bcd60e51b815260206004820152601860248201527f43616e206e6f7420627579207768617420796f75206f776e0000000000000000604482015290519081900360640190fd5b3360006123f983611271565b9050612406818385611fae565b6000838152600e6020526040808220549051602882049291839003916001600160a01b038516916108fc84150291849190818181858888f19350505050158015612454573d6000803e3d6000fd5b50600d546040516001600160a01b039091169083156108fc029084906000818181858888f1935050505015801561248f573d6000803e3d6000fd5b506000858152600e60205260409020543411156124f1576000858152600e60205260408082205490516001600160a01b03871692349290920380156108fc0292909190818181858888f193505050501580156124ef573d6000803e3d6000fd5b505b505050600091825250600f60205260409020805460ff19169055565b600061117483836128ae565b61252383836128c6565b6125306000848484612746565b610d8a5760405162461bcd60e51b8152600401808060200182810382526032815260200180612de36032913960400191505060405180910390fd5b5490565b600061117483836129f4565b60006111748383612aba565b600061212f84846001600160a01b038516612b04565b815460009082106125df5760405162461bcd60e51b8152600401808060200182810382526022815260200180612dc16022913960400191505060405180910390fd5b8260000182815481106125ee57fe5b9060005260206000200154905092915050565b8154600090819083106126455760405162461bcd60e51b8152600401808060200182810382526022815260200180612f166022913960400191505060405180910390fd5b600084600001848154811061265657fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816127175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126dc5781810151838201526020016126c4565b50505050905090810190601f1680156127095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061272a57fe5b9060005260206000209060020201600101549150509392505050565b600061275a846001600160a01b0316612b9b565b61276657506001611fa6565b6060612874630a85bd0160e11b61277b611d46565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127e25781810151838201526020016127ca565b50505050905090810190601f16801561280f5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612de3603291396001600160a01b0388169190612ba1565b9050600081806020019051602081101561288d57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b6001600160a01b038216612921576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61292a81611d39565b1561297c576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b61298860008383610d8a565b6001600160a01b03821660009081526001602052604090206129aa908261257b565b506129b760028284612587565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120548015612ab05783546000198083019190810190600090879083908110612a2757fe5b9060005260206000200154905080876000018481548110612a4457fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612a7457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611177565b6000915050611177565b6000612ac683836128ae565b612afc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611177565b506000611177565b600082815260018401602052604081205480612b69575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612132565b82856000016001830381548110612b7c57fe5b9060005260206000209060020201600101819055506000915050612132565b3b151590565b606061212f848460008585612bb585612b9b565b612c06576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612c455780518252601f199092019160209182019101612c26565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612ca7576040519150601f19603f3d011682016040523d82523d6000602084013e612cac565b606091505b5091509150612cbc828286612cc7565b979650505050505050565b60608315612cd6575081612132565b825115612ce65782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156126dc5781810151838201526020016126c4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d6e57805160ff1916838001178555612d9b565b82800160010185558215612d9b579182015b82811115612d9b578251825591602001919060010190612d80565b50612da7929150612dab565b5090565b5b80821115612da75760008155600101612dac56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212206f84c427acbe5ab3f0bdec77736b461fa558728f6def6dc522c5109401f3757664736f6c63430007020033";

    public static final String FUNC__CONTRACTOWNER = "_contractOwner";

    public static final String FUNC__TOKENCONTENTS = "_tokenContents";

    public static final String FUNC__TOKENTITLES = "_tokenTitles";

    public static final String FUNC__TOKENURIS = "_tokenURIs";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_COVERINTR = "coverIntr";

    public static final String FUNC_COVERPIC = "coverPic";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETTOKENITEMINFO = "getTokenItemInfo";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LISTEDMAP = "listedMap";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PRICE = "price";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATELISTINGSTATUS = "updateListingStatus";

    public static final String FUNC_UPDATEPRICE = "updatePrice";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINTED_EVENT = new Event("Minted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NFTLISTSTATUS_EVENT = new Event("NftListStatus",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PRICEUPDATE_EVENT = new Event("PriceUpdate",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PURCHASE_EVENT = new Event("Purchase",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected NFTSol(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTSol(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFTSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NFTSol(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<MintedEventResponse> getMintedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTED_EVENT, transactionReceipt);
        ArrayList<MintedEventResponse> responses = new ArrayList<MintedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintedEventResponse typedResponse = new MintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintedEventResponse>() {
            @Override
            public MintedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTED_EVENT, log);
                MintedEventResponse typedResponse = new MintedEventResponse();
                typedResponse.log = log;
                typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTED_EVENT));
        return mintedEventFlowable(filter);
    }

    public List<NftListStatusEventResponse> getNftListStatusEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NFTLISTSTATUS_EVENT, transactionReceipt);
        ArrayList<NftListStatusEventResponse> responses = new ArrayList<NftListStatusEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NftListStatusEventResponse typedResponse = new NftListStatusEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NftListStatusEventResponse> nftListStatusEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NftListStatusEventResponse>() {
            @Override
            public NftListStatusEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NFTLISTSTATUS_EVENT, log);
                NftListStatusEventResponse typedResponse = new NftListStatusEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NftListStatusEventResponse> nftListStatusEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTLISTSTATUS_EVENT));
        return nftListStatusEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PriceUpdateEventResponse> getPriceUpdateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRICEUPDATE_EVENT, transactionReceipt);
        ArrayList<PriceUpdateEventResponse> responses = new ArrayList<PriceUpdateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PriceUpdateEventResponse typedResponse = new PriceUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oldPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PriceUpdateEventResponse> priceUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PriceUpdateEventResponse>() {
            @Override
            public PriceUpdateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PRICEUPDATE_EVENT, log);
                PriceUpdateEventResponse typedResponse = new PriceUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oldPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PriceUpdateEventResponse> priceUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRICEUPDATE_EVENT));
        return priceUpdateEventFlowable(filter);
    }

    public List<PurchaseEventResponse> getPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASE_EVENT, transactionReceipt);
        ArrayList<PurchaseEventResponse> responses = new ArrayList<PurchaseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PurchaseEventResponse typedResponse = new PurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchaseEventResponse>() {
            @Override
            public PurchaseEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASE_EVENT, log);
                PurchaseEventResponse typedResponse = new PurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nftID = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASE_EVENT));
        return purchaseEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> _contractOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__CONTRACTOWNER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> _tokenContents(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__TOKENCONTENTS,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> _tokenTitles(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__TOKENTITLES,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> _tokenURIs(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__TOKENURIS,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> baseURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BASEURI,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buy(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY,
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> coverIntr() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COVERINTR,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> coverPic() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COVERPIC,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETAPPROVED,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTokenItemInfo(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETTOKENITEMINFO,
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(owner),
                new Address(operator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> listedMap(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LISTEDMAP,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(String _tokenURI, String _toAddress, BigInteger _price, String title, String content) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Utf8String(_tokenURI),
                new Address(_toAddress),
                new Uint256(_price),
                new Utf8String(title),
                new Utf8String(content)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NAME,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNEROF,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> price(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PRICE,
                Arrays.<Type>asList(new Uint256(param0)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new Address(owner),
                new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENURI,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateListingStatus(BigInteger _tokenId, Boolean shouldBeListed) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATELISTINGSTATUS,
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Bool(shouldBeListed)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePrice(BigInteger _tokenId, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPRICE,
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Uint256(_price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NFTSol load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTSol(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFTSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTSol(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFTSol load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFTSol(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFTSol load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFTSol(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFTSol> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String tokenName, String tokenSymbol, String _coverPic, String _coverIntr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(tokenName),
                new Utf8String(tokenSymbol),
                new Utf8String(_coverPic),
                new Utf8String(_coverIntr)));
        return deployRemoteCall(NFTSol.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<NFTSol> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String tokenName, String tokenSymbol, String _coverPic, String _coverIntr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(tokenName),
                new Utf8String(tokenSymbol),
                new Utf8String(_coverPic),
                new Utf8String(_coverIntr)));
        return deployRemoteCall(NFTSol.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTSol> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String tokenName, String tokenSymbol, String _coverPic, String _coverIntr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(tokenName),
                new Utf8String(tokenSymbol),
                new Utf8String(_coverPic),
                new Utf8String(_coverIntr)));
        return deployRemoteCall(NFTSol.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTSol> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String tokenName, String tokenSymbol, String _coverPic, String _coverIntr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(tokenName),
                new Utf8String(tokenSymbol),
                new Utf8String(_coverPic),
                new Utf8String(_coverIntr)));
        return deployRemoteCall(NFTSol.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class MintedEventResponse {
        public Log log;

        public String minter;

        public BigInteger price;

        public BigInteger nftID;

        public String uri;
    }

    public static class NftListStatusEventResponse {
        public Log log;

        public String owner;

        public BigInteger nftID;

        public Boolean isListed;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class PriceUpdateEventResponse {
        public Log log;

        public String owner;

        public BigInteger oldPrice;

        public BigInteger newPrice;

        public BigInteger nftID;
    }

    public static class PurchaseEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;

        public BigInteger price;

        public BigInteger nftID;

        public String uri;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
